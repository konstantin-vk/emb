/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

/**************************************************/
#include <stdint.h>


void setup(void);


int main(void)
{
	setup();
    /* Loop forever */
	for(;;);
}







/**********************************************************************/
void setup(void)
{
	// CLOCK
	// AHB1 = RCC_AHB1ENR, GPIOA EN = bit 1
	// RCC = 0x40020000UL + 0x3800UL; RCC_AHB1ENR (RCC AHB1 peripheral clock enable register) = RCC + 0x30
	uint32_t *pRCCAhb1Enr = 	(uint32_t *)0x40020000UL + 0x3800UL + 0x30UL;
	// RCC_AHB1ENR Enable GPIOA (bit 1)
	*pRCCAhb1Enr|=(1<<0);

	// GPIO = GPIOA = 0x40020000UL
	// mode = ouptup,  Output type = 0 Output push-pull, speed = 00: Low speed
	// GPIOA_MODER = 0x40020000UL + 0x00.  Val=01: General purpose output mode . Pin 0 = Bit [0,1] , Pin 1 = Bit [2,3] , Pin 3 = Bit [4,5]
	uint32_t * pGPIOAModer = (uint32_t *)0x40020000UL + 0x00UL;
	// GPIOA_OTYPER = 0x40020000UL + 0x04.. Val = 0: Output push-pull (reset state). Pin0=0,1=1,2=2;
	// GPIOA_ODR = 0x40020000UL + 0x14UL. Pin0=0,1=1,2=2;
	// GPIOA_BSRR = 0x40020000UL + 0x18UL; SET Pin0=0,1=1,2=2; RESET Pin0=bit16,1=17,2=18;


}


/**********************************************************************/
void delay(uint32_t time)
{
	for (uint32_t i =0 ; i< time; i++);
}
